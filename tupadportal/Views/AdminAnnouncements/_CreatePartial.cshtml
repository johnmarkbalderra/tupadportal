@model tupadportal.Models.Announcement

<form asp-action="Create" method="post" id="createForm">
    @Html.AntiForgeryToken()
    <div asp-validation-summary="ModelOnly" class="text-danger"></div>
    <div class="mb-3">
        <label asp-for="Title" class="form-label"></label>
        <input asp-for="Title" class="form-control" />
        <span asp-validation-for="Title" class="text-danger"></span>
    </div>
    <div class="mb-3">
        <label asp-for="Description" class="form-label"></label>
        <textarea asp-for="Description" class="form-control"></textarea>
        <span asp-validation-for="Description" class="text-danger"></span>
    </div>
    <!--<div class="form-check mb-3">
        <input class="form-check-input" asp-for="Read" />
        <label class="form-check-label" asp-for="Read"></label>
    </div>-->
    <div class="mb-3">
        <label asp-for="AddressId" class="form-label">Barangay</label>
        <select asp-for="AddressId" class="form-select" asp-items="ViewBag.AddressId"></select>
        <span asp-validation-for="AddressId" class="text-danger"></span>
    </div>
    <div class="mb-3">
        <label asp-for="CreatedDate" class="form-label"></label>
        <input asp-for="CreatedDate" class="form-control" readonly />
        <span asp-validation-for="CreatedDate" class="text-danger"></span>
    </div>
    <div class="d-flex justify-content-end">
        <button type="submit" class="btn btn-primary">Create</button>
    </div>
</form>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            var createForm = document.getElementById('createForm');
            if (createForm) {
                createForm.addEventListener('submit', function (event) {
                    event.preventDefault(); // Prevent default form submission

                    var formData = new FormData(createForm);

                    fetch('@Url.Action("Create", "AdminAnnouncements")', {
                        method: 'POST',
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest'
                        },
                        body: formData
                    })
                        .then(response => {
                            if (response.redirected) {
                                window.location.href = response.url;
                            } else if (response.ok) {
                                return response.text();
                            } else {
                                return response.text().then(text => { throw new Error(text); });
                            }
                        })
                        .then(html => {
                            // Optionally, append the new announcement to the list
                            var announcementsContainer = document.querySelector('.d-flex.flex-wrap');
                            announcementsContainer.insertAdjacentHTML('beforeend', html);

                            // Close the modal
                            var createModal = bootstrap.Modal.getInstance(document.getElementById('createModal'));
                            createModal.hide();

                            // Optionally, reset the form
                            createForm.reset();
                        })
                        .catch(error => {
                            console.error('Error:', error);
                            // Display validation errors within the modal
                            var modalBody = document.querySelector('#createModal .modal-body');
                            modalBody.innerHTML = '<div class="alert alert-danger">An error occurred while creating the announcement.</div>';
                        });
                });
            }
        });
    </script>
}
